{
    // Persistent data store path. Will store holograms and app executable/runtime/log data.
    //"DataPath": "%Home%/.phoesion/glow/lighthouse",

    // Server private rsa key used for Server authentication and encryption.
    //"PrivateKey": null,

    // Kaleidoscope connection string. "auto" enables auto-discovery services
    //"KaleidoscopeConnectionString": "Host=auto",

    // Key generated for Lighthouse entity to authenticate to broker (kaleidoscope).
    //"EntityAuthKey": null,

    /*
    // Load configs from Secrets Providers (eg AWS Secrets Manager, Azure, etc)
    "SecretsProvider": {
        "Provider": "AWS", // Load from AWS
        "SecretName": "my_secret" // <-- secret is a json string of the configs
    }
    */

    // Allow only local connections (loopback, eg 127.0.0.1).
    //"AllowOnlyLocalConnections": false,

    //Allow only private connections. The private address ranges as defined in RFC1918:
    //   127.0.0.0    - 127.255.255.255 (loopback)
    //   10.0.0.0     - 10.255.255.255 (10/8 prefix)
    //   172.16.0.0   - 172.31.255.255 (172.16/12 prefix)
    //   192.168.0.0  - 192.168.255.255 (192.168/16 prefix)
    //"AllowOnlyIntranetConnections": false,

    // Database store for Lighthouse operations. Will store information for user/entity/quantumSpaces/etc.
    /*
    "Database": {
        "Provider": "SQLite",
        "ConnectionString": "Data Source=%DataPath%/Phoesion.Glow.Lighthouse.db;"
    },
    */

    // Database store for logging.
    /*
    "LoggingDatabase": {
        "Provider": "SQLite",
        "ConnectionString": "Data Source=%DataPath%/Phoesion.Glow.Lighthouse.Logging.db;"
    },
    */

    // Database store for metrics.
    /*
    "MetricsDatabase": {
        "Provider": "SQLite",
        "ConnectionString": "Data Source=%DataPath%/Phoesion.Glow.Lighthouse.Metrics.db;"
    },
    */

    // Database store for AppData (caches, jobs, featureflags, etc...)
    /*
    "AppDataDatabase": {
        "Provider": "SQLite",
        "ConnectionString": "Data Source=%DataPath%/Phoesion.Glow.Lighthouse.AppData.db;"
    },
    */
	
    // Web UI configurations.
    /*
    "WebUI": {
        "IsEnabled": false,
        "HttpPort": [ 15001 ],
        "HttpsPort": [ 15002 ],
        "RedirectToHTTPS": true,

        // SSL Methods (Select ONE of the following)
        // 1. Using a pfx certificate file,
        PfxCertificate : "c:\files\certificate.pfx"
        PfxPassword : "mypassword"

        // 2. Using a certificate added to available certificates in Glow/Lighthouse ( from Admin Panel)
        SystemCertificateName : "WebUI Certificate",

        // 3. Using Let's Encrypt to generate certificate (NOT AVAILABLE YET)
        LetsEncrypt : {
            IsEnabled : true,
            AcceptTermsOfService : true,
            DomainNames : [ "mydomain.com" ],
            EmailAddress : "admin@mydomain.com"
        }
    },
    */

    // Create Default admin user, useful when building an image to run in a container.
    /* Example :
    "DefaultUser": {
        "Username": "admin",
        "Name": "Administrator",
        "Description": "Default administrator account created from configs",
        "Email": "admin@myOrganization.org",
        "Password": null, //not used, prefer ssh keys
        "SshKey": "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQElJ......X92NrHEcrqBRXMsQ== my_rsa_key",
        "AllowedIP": "*", //null for localhost, "*" for all ips, or use a comma-separated ip list
    }
    */

    // Create Defaults (when running for first time) using configs, useful when building an image to run in a container.
    /* Example :
    "Init": [
        "QuantumSpaces" : [
            // init a qspace with name 'SomeQspace' and add a domain binding for 'mytest.myhost.com'
            {
                "Name": "SomeQspace",  
                "Type": Development,
                "Domains": [
                    {
                        "Domain": "mytest.myhost.com",
                    }
                ],
                "ServiceGroups": [
                    {
                        "Name": "myGroupA",
                        "Description": "Service Group A",
                    }
                ],
                "EntityGroups": [ myEntityGroupA" ], 
            }
        ],
    
        "EntityGroups": [
            {
                "Name": "myEntityGroupA",
                "Description": "Entity Group A",
            }
        ]
    }
    */
}
