{
    // Persistent data store path. Will store holograms and app executable/runtime/log data.
    //"DataPath": "%Home%/.phoesion/glow/prism",

    // Kaleidoscope connection string. "auto" enables auto-discovery services
    //"KaleidoscopeConnectionString": "Host=auto",

    // Key generated for Prism entity to authenticate to broker (kaleidoscope).
    //"EntityAuthKey": null,

    // Web server ports
    //"HttpPort": [ 80, 16000 ],
    //"HttpsPort": [ 443, 16001 ],

    //Enable X-Forwarded-xxx headers
    //"XForwardedFor": true,
    //"XForwardedProto": true,
    //"XForwardedHost": true,

    // Forwarded headers for client ip, when prism is behind a proxy.
    /*
    "ForwardedIP_Headers": [
        "X-Real-IP",
        "True-Client-IP", // CloudFlare
        "CF-Connecting-IP" // CloudFlare
    ],
    */

    // Resolve the domain from header instead of request url. Useful when behind a reverse proxy, to specify the desired domain.
    //"ResolveDomainFromHeader": null,

    // Resolve the quantum space from header instead of domain. Useful when behind a reverse proxy, to target the desired QuantumSpace.
    //"ResolveQuantumSpaceFromHeader": null,

    // Enable or Disable response compression.
    //"ResponseCompression": false,

    // Setup Default values for security headers
    //"Default_XFrameOptions": "SAMEORIGIN",

    // SignalR Configurations
    /*
    "SignalR": {
        // Enable/Disable SignaR
        "IsEnabled": true,

        // Specify the maximum allowed parallel invocations per client
        //"MaximumParallelInvocationsPerClient": 16,

        // Add routes to map to signalR hub. ( default is "/Glow.SignalR")
        //HubRoutes

        "MessagePack": {
            // Enable/Disable MessagePack protocol for SignalR
            "IsEnabled": true,
        }
    },
    */

    // WebSockets Configurations
    /*
    "WebSockets": {
        // Enable/Disable WebSockets
        "IsEnabled": true,
    },
    */

    // Set IsEphemeral true to enable a state-less operation mode, if you don't want to have a state-full persistent volume when running in a container.
    //    In this case EntitySeed/EntityId will be generated on the fly and all files will be re-synced when service starts
    //"IsEphemeral": false
}
